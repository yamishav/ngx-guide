{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,iCAAiC;AACjC,wDAA2E;AAC3E,4EAAuE;AAEvE,yCAAyC;AACzC,uCAMqB;AAER,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,GAAG,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,2BAAmB,CAAyB,CAAC;IAC/E,MAAM,QAAQ,GAAa,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;IAEpD,6BAA6B;IAC7B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACzE,MAAM,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC;IAEzC,MAAM,OAAO,CAAC,GAAG,CAAC;QAChB,yCAAkB,CAChB,SAAS,CAAC,IAAI,CAAC,WAAW,EAC1B,QAAQ,EACR;YACE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YAC7B,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM;SAC/B,EACD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAC3B;QAED,yCAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE;YACvD,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAC1B,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;YAC3B,kBAAkB,EAAE,IAAI;YACxB,kDAAkD;YAClD,WAAW,EAAE,KAAK;YAClB,cAAc,EAAE,SAAS;YACzB,gBAAgB,EAAE,IAAI;YACtB,mBAAmB,EAAE,IAAI;YACzB,kBAAkB,EAAE,KAAK;SAC1B,CAAC;KACH,CAAC,CAAC;IAEH,iBAAiB,CAAC,OAAO,EAAE,CAAC;IAE5B,6FAA6F;IAC7F,8CAA8C;IAC9C,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACzB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;IAEtB,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport { Transform, transformFromPromise } from '../../../brocc/transform';\nimport { compileSourceFiles } from '../../../ngc/compile-source-files';\nimport { TsConfig } from '../../../ts/tsconfig';\nimport * as log from '../../../util/log';\nimport {\n  isEntryPointInProgress,\n  isTypeScriptSources,\n  TypeScriptSourceNode,\n  isEntryPoint,\n  EntryPointNode\n} from '../../nodes';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Compiling TypeScript sources through ngc`);\n  const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\n  const tsSources = entryPoint.find(isTypeScriptSources) as TypeScriptSourceNode;\n  const tsConfig: TsConfig = entryPoint.data.tsConfig;\n\n  // Compile TypeScript sources\n  const { esm2015, esm5, declarations } = entryPoint.data.destinationFiles;\n  const previousTransform = tsSources.data;\n\n  await Promise.all([\n    compileSourceFiles(\n      tsSources.data.transformed,\n      tsConfig,\n      {\n        outDir: path.dirname(esm2015),\n        declaration: true,\n        target: ts.ScriptTarget.ES2015\n      },\n      path.dirname(declarations)\n    ),\n\n    compileSourceFiles(tsSources.data.transformed, tsConfig, {\n      outDir: path.dirname(esm5),\n      target: ts.ScriptTarget.ES5,\n      downlevelIteration: true,\n      // the options are here, to improve the build time\n      declaration: false,\n      declarationDir: undefined,\n      skipMetadataEmit: true,\n      skipTemplateCodegen: true,\n      strictMetadataEmit: false\n    })\n  ]);\n\n  previousTransform.dispose();\n\n  // Clean up TypeScript compiler nodes. Releases TypeScript memory allocations to avoid memory\n  // leaks with multiple secondary entry points.\n  tsSources.data.dispose();\n  tsSources.data = null;\n\n  return graph;\n});\n"]}