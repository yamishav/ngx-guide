{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/lib/ts/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ng from '@angular/compiler-cli/src/perform_compile';\n// XX: has or is using name 'ParsedConfiguration' ... but cannot be named\nimport { ParsedConfiguration } from '@angular/compiler-cli/src/perform_compile';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport { NgEntryPoint } from '../ng-package-format/entry-point';\nimport { EntryPointNode } from '../ng-v5/nodes';\nimport * as log from '../util/log';\n\n/**\n * TypeScript configuration used internally (marker typer).\n */\nexport type TsConfig = ng.ParsedConfiguration;\n\n/**\n * Reads the default TypeScript configuration.\n */\nexport function readDefaultTsConfig(fileName?: string): TsConfig {\n  if (!fileName) {\n    fileName = path.resolve(__dirname, 'conf', 'tsconfig.ngc.json');\n  }\n\n  return ng.readConfiguration(fileName);\n}\n\n/**\n * Creates a parsed TypeScript configuration object.\n *\n * @param values File path or parsed configuration.\n */\nexport function createDefaultTsConfig(values?: TsConfig | string): TsConfig {\n  if (!values) {\n    return readDefaultTsConfig();\n  } else if (typeof values === 'string') {\n    return readDefaultTsConfig(values);\n  } else {\n    return values;\n  }\n}\n\n/**\n * Initializes TypeScript Compiler options and Angular Compiler options by overriding the\n * default config with entry point-specific values.\n */\nexport const initializeTsConfig = (defaultTsConfig: TsConfig, entryPoints: EntryPointNode[]) => {\n  entryPoints.forEach(currentEntryPoint => {\n    const { entryPoint } = currentEntryPoint.data;\n    log.debug(`Initializing tsconfig for ${entryPoint.moduleId}`);\n    const basePath = path.dirname(entryPoint.entryFilePath);\n\n    // Resolve defaults from DI token and create a deep copy of the defaults\n    let tsConfig: TsConfig = JSON.parse(JSON.stringify(defaultTsConfig));\n\n    // minimal compilerOptions needed in order to avoid errors, with their associated default values\n    // some are not overrided in order to keep the default associated TS errors if the user choose to set incorrect values\n    const requiredOptions: Partial<ts.CompilerOptions> = {\n      emitDecoratorMetadata: true,\n      experimentalDecorators: true,\n      moduleResolution: ts.ModuleResolutionKind.NodeJs,\n      target: ts.ScriptTarget.ES2015,\n      declaration: true,\n      lib: ['dom', 'es2015']\n    };\n\n    const overrideConfig: Partial<TsConfig> = {\n      rootNames: [entryPoint.entryFilePath],\n      options: {\n        flatModuleId: entryPoint.moduleId,\n        flatModuleOutFile: `${entryPoint.flatModuleFile}.js`,\n        basePath: basePath,\n        rootDir: basePath,\n        outDir: '',\n        lib: entryPoint.languageLevel ? entryPoint.languageLevel.map(lib => `lib.${lib}.d.ts`) : tsConfig.options.lib,\n        // setting this as basedir will rewire triple-slash references\n        declarationDir: basePath,\n        // required in order to avoid \"ENOENT: no such file or directory, .../.ng_pkg_build/...\" errors when using the programmatic API\n        inlineSources: true,\n        // setting the below here because these are a must have with these valus\n        inlineSourceMap: true,\n        sourceMap: false,\n        sourceRoot: `ng://${entryPoint.moduleId}`\n      }\n    };\n\n    tsConfig.rootNames = overrideConfig.rootNames;\n    tsConfig.options = { ...requiredOptions, ...tsConfig.options, ...overrideConfig.options };\n\n    switch (entryPoint.jsxConfig) {\n      case 'preserve':\n        tsConfig.options.jsx = ts.JsxEmit.Preserve;\n        break;\n      case 'react':\n        tsConfig.options.jsx = ts.JsxEmit.React;\n        break;\n      case 'react-native':\n        tsConfig.options.jsx = ts.JsxEmit.ReactNative;\n        break;\n      default:\n        break;\n    }\n\n    // Add paths mappings for dependencies\n    const entryPointDeps = entryPoints.filter(x => x.data.entryPoint.moduleId !== entryPoint.moduleId);\n    if (entryPointDeps.length > 0) {\n      if (!tsConfig.options.paths) {\n        tsConfig.options.paths = {};\n      }\n\n      for (let dep of entryPointDeps) {\n        const { entryPoint, destinationFiles } = dep.data;\n        const { moduleId, entryFilePath } = entryPoint;\n        const mappedPath = [destinationFiles.declarations, entryFilePath];\n\n        if (!tsConfig.options.paths[moduleId]) {\n          tsConfig.options.paths[moduleId] = mappedPath;\n        } else {\n          tsConfig.options.paths[moduleId].concat(mappedPath);\n        }\n      }\n    }\n\n    currentEntryPoint.data.tsConfig = tsConfig;\n  });\n};\n"]}