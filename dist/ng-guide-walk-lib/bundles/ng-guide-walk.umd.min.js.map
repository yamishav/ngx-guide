{"version":3,"sources":["ng://ng-guide-walk/lib/ng-guide-walk-lib.service.ts","ng://ng-guide-walk/lib/ng-guide-walk-lib.component.ts","ng://ng-guide-walk/lib/utils/index.ts","ng://ng-guide-walk/lib/guide-content/guide-content.component.ts","ng://ng-guide-walk/lib/ng-guide-step.directive.ts","ng://ng-guide-walk/lib/ng-guide-walk-lib.module.ts"],"names":["NgGuideWalkLibService","this","activeSteps","eventWalkSubject","Subject","currentStep","_config","Object","defineProperty","prototype","config","register","step","push","unregister","filter","stepNumber","isLast","stopGuide","closeCurrentStep","undefined","startGuide","sort","invokeStep","stepNum","next","event","nextGuide","getStepObservable","asObservable","pipe","item","Injectable","args","providedIn","NgGuideWalkLibComponent","ngOnInit","Component","selector","template","toNumber","num","Number","isInteger","parseInt","GuideContentComponent","_element","_renderer","host","guideService","currentAction","_step","show","overlayObject","shouldCreateOverlay","positionFixed","eventsEnabled","location","displayArrow","customCss","GuideUtils.toNumber","_a","modifiers","popper","Popper","getNode","nativeElement","querySelector","placement","ngOnDestroy","destroy","clean","done","target","document","style","display","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","NgGuideStepDirective","elementRef","viewContainerRef","renderer","injector","resolver","walkLibService","position","ngGuideStepLocation","ngGuideStepStyle","ngGuideStepDisplayArrow","ngGuideStepFocusElement","subscribeToGuideRequest","closeComponent","_this","componentRef","afterStepRun","generateComponent","factory","resolveComponentFactory","content","generateNgContent","createComponent","setInputs","handleFocus","handleOverlay","ngGuideStepContent","createText","TemplateRef","createEmbeddedView","rootNodes","create","instanceRef","instance","takeUntil","unsignedOnDestroyed","component","oldNgOnDestroy","onDestroySubject$","ReplaySubject","apply","complete","subscribe","walkEvent","addClass","onDestroy","removeClass","focus","Directive","ViewContainerRef","Injector","ComponentFactoryResolver","NgGuideWalkLibModule","forRoot","ngModule","providers","provide","useClass","NgModule","imports","CommonModule","entryComponents","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { WalkEvent } from './ng-guide.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgGuideWalkLibService {\n  private activeSteps = [];\n  private eventWalkSubject: Subject<WalkEvent> = new Subject();\n  private currentStep: number | null = null;\n  private _config = {};\n\n  get config() {\n    return this._config;\n  }\n  set config(config) {\n    this._config = config;\n  }\n\n  constructor() { }\n  register(step: number) {\n    this.activeSteps.push(step);\n  }\n  unregister(step: number) {\n    this.activeSteps =  this.activeSteps.filter(stepNumber => stepNumber !== step);\n  }\n  isLast(step) {\n\n    return this.currentStep ? (this.activeSteps.length) === step : true;\n  }\n  stopGuide() {\n    this.closeCurrentStep();\n    this.currentStep = undefined;\n  }\n  public startGuide() {\n    this.activeSteps.sort();\n    if (this.currentStep) { return; }\n    this.currentStep = 1;\n    this.invokeStep(this.currentStep);\n  }\n  public invokeStep(stepNum: number) {\n    this.closeCurrentStep();\n    this.currentStep = this.activeSteps[stepNum - 1];\n    this.eventWalkSubject.next({ step: stepNum, event: 'open' });\n  }\n  private closeCurrentStep() {\n    if (this.currentStep) {\n      this.eventWalkSubject.next({ step: this.currentStep, event: 'close' });\n    }\n  }\n\n  public nextGuide() {\n    this.closeCurrentStep();\n    if (this.isLast(this.currentStep)) {\n      this.currentStep = undefined;\n      return; // and we are done for this tour\n    }\n    this.currentStep++;\n    this.invokeStep(this.currentStep);\n    \n    \n  }\n  public getStepObservable(stepNum: number): Observable<WalkEvent> {\n    return this.eventWalkSubject\n      .asObservable()\n      .pipe(filter(item => item.step === stepNum));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ng-guide-walk',\n  template: `\n    <p>\n      ng-guide-walk-lib works!\n    </p>\n    <ng-content></ng-content>\n  `,\n  styles: []\n})\nexport class NgGuideWalkLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * \n * @param num - the number to parse\n * Try's to parse any to number\n */\nexport function toNumber(num: number | any): number {\n    return Number.isInteger(num) ? num : Number.parseInt(num);\n}\n\nexport function unsignedOnDestroyed(component: OnDestroy) {\n  const oldNgOnDestroy = component.ngOnDestroy;\n  const onDestroySubject$ = new ReplaySubject<void>(1);\n  component.ngOnDestroy = () => {\n    oldNgOnDestroy.apply(component);\n    onDestroySubject$.next(undefined);\n    onDestroySubject$.complete();\n  };\n  return onDestroySubject$;\n}\n","import { Component, OnInit, Input, OnDestroy, ElementRef, Renderer2, ViewEncapsulation } from '@angular/core';\nimport * as GuideUtils from '../utils';\nimport { NgGuideWalkLibService } from '../ng-guide-walk-lib.service';\nimport { TouchSequence } from 'selenium-webdriver';\nimport 'popper.js';\nimport Popper from 'popper.js';\nexport type WalkLocation = Popper.Placement;\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ng-guide-content',\n  templateUrl: './guide-content.component.html',\n  styleUrls: ['./guide-content.component.scss']\n})\nexport class GuideContentComponent implements OnInit, OnDestroy {\n  private currentAction: 'next' | 'stop' = 'next';\n  private _step = 1;\n  private popper: Popper;\n  show = true;\n  overlayObject = null;\n  @Input() shouldCreateOverlay = false;\n  @Input() modifiers: Popper.Modifiers;\n  @Input() positionFixed = false;\n  @Input() eventsEnabled = true;\n  @Input() target: string | Element;\n  @Input() location: WalkLocation = 'right';\n  @Input() displayArrow: boolean = true;\n  @Input() customCss: { [key: string]: string } = null;\n  @Input() set step(step: number) {\n    this._step = GuideUtils.toNumber(step);\n  }\n  get step() {\n    return this._step;\n  }\n\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _renderer: Renderer2,\n    private host: ElementRef<HTMLElement>,\n    private guideService: NgGuideWalkLibService) {\n\n  }\n\n  ngOnInit() {\n    // todo : move to an action trigger when needed\n\n    const { location, positionFixed, eventsEnabled, modifiers } = this;\n  \n    this.popper = new Popper(\n      this.getNode(),\n      this._element.nativeElement.querySelector('.ngx-guide'),\n      <any>{\n        placement: location,\n        positionFixed,\n        eventsEnabled,\n        modifiers\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.popper.destroy();\n    this.clean();\n  }\n  next() {\n    this.guideService.nextGuide();\n\n\n  }\n  isLast() {\n    return this.guideService.isLast(this.step);\n  }\n  done() {\n    this.guideService.stopGuide();\n  }\n  private getNode(): Element {\n    if (this.target) {\n      if (typeof this.target === 'string') {\n        return document.querySelector(this.target);\n      } else {\n        return this.target;\n      }\n    } else {\n      return this._element.nativeElement;\n    }\n  }\n  private clean() {\n    if (!this.overlayObject) { return; }\n    this.overlayObject.style.display = 'none';\n  }\n}\n","import {\n  Directive,\n  ViewContainerRef,\n  ElementRef,\n  Input,\n  TemplateRef,\n  Type,\n  ComponentRef,\n  ComponentFactoryResolver, Renderer2, Injector, OnDestroy, OnInit\n} from '@angular/core';\nimport { NgGuideWalkLibService } from './ng-guide-walk-lib.service';\nimport { toNumber, unsignedOnDestroyed } from './utils';\nimport { WalkEvent } from './ng-guide.types';\nimport { takeUntil } from 'rxjs/operators';\nimport { GuideContentComponent, WalkLocation } from './guide-content/guide-content.component';\n\n\n\n@Directive({\n  selector: '[ngGuideStep]',\n})\nexport class NgGuideStepDirective implements OnInit, OnDestroy {\n\n  position = 'below';\n\n  private _step: number = 1;\n\n  @Input('ngGuideStep') set step(stepNumber: number | string) {\n    this._step = toNumber(stepNumber);\n  }\n  get step(): number | string {\n    return this._step;\n  }\n\n  beforeStepRun: (next: () => null | void | any, cancel: () => null | void | any) => null;\n  afterStepRun: (next: () => null | void | any, cancel: () => null | void | any) => null;\n  @Input('ngGuideStepContent') ngGuideStepContent: string | TemplateRef<any> | Type<any>;\n\n  @Input('ngGuideStepLocation') ngGuideStepLocation: WalkLocation = 'bottom';\n  @Input('ngGuideStepStyle') ngGuideStepStyle: { [key: string]: string } | null = null;\n  @Input('ngGuideStepDisplayArrow') ngGuideStepDisplayArrow: boolean = true;\n  @Input('ngGuideStepFocusElement') ngGuideStepFocusElement: boolean = true;\n  private componentRef: ComponentRef<GuideContentComponent>;\n  constructor(\n    private elementRef: ElementRef,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2,\n    private injector: Injector,\n    private resolver: ComponentFactoryResolver,\n    private walkLibService: NgGuideWalkLibService) { }\n\n  ngOnInit(): void {\n    this.subscribeToGuideRequest();\n    this.walkLibService.register(this.step as number);\n  }\n  ngOnDestroy(): void {\n    this.closeComponent();\n    this.walkLibService.unregister(this.step as number);\n  }\n  private closeComponent() {\n    if (!this.componentRef) { return; }\n    if (this.afterStepRun) {\n      this.afterStepRun(() => {\n        this.componentRef.destroy();\n        this.componentRef = null;\n      }, () => this.walkLibService.stopGuide());\n    } else {\n      this.componentRef.destroy();\n      this.componentRef = null;\n    }\n\n  }\n  private generateComponent() {\n    const factory = this.resolver.resolveComponentFactory(GuideContentComponent);\n    const content = this.generateNgContent();\n    this.componentRef = this.viewContainerRef.createComponent(factory, 0, null, content);\n    this.setInputs();\n    this.handleFocus();\n    this.handleOverlay();\n  }\n\n  private createComponent() {\n    if (this.afterStepRun) {\n      this.afterStepRun(() => this.generateComponent(),\n        () => this.walkLibService.stopGuide());\n    } else {\n      this.generateComponent();\n    }\n\n  }\n\n  generateNgContent() {\n    // Content is string\n    if (typeof this.ngGuideStepContent === 'string') {\n      const element = this.renderer.createText(this.ngGuideStepContent);\n      return [[element]];\n    }\n    // Content is Template\n    if (this.ngGuideStepContent instanceof TemplateRef) {\n      const viewRefTemplate = this.ngGuideStepContent.createEmbeddedView({});\n      return [viewRefTemplate.rootNodes];\n    }\n\n    // Else it's a component\n    const factory = this.resolver.resolveComponentFactory(this.ngGuideStepContent);\n    const viewRef = factory.create(this.injector);\n    return [[viewRef.location.nativeElement]];\n  }\n  private setInputs() {\n    const instanceRef = this.componentRef.instance;\n    instanceRef.step = this.step as number;\n    instanceRef.target = this.elementRef.nativeElement;\n    instanceRef.location = this.ngGuideStepLocation || 'bottom';\n    instanceRef.displayArrow = this.ngGuideStepDisplayArrow;\n    if (this.ngGuideStepStyle) {\n      instanceRef.customCss = this.ngGuideStepStyle;\n    }\n  }\n  private subscribeToGuideRequest() {\n    this.walkLibService.getStepObservable(<number>this.step)\n      .pipe(takeUntil(unsignedOnDestroyed(this)))\n      .subscribe((walkEvent: WalkEvent) => walkEvent.event === 'open' ? this.createComponent() : this.closeComponent());\n  }\n\n  private handleOverlay() {\n    this.renderer.addClass(this.elementRef.nativeElement, 'overlay');\n    // this.elementRef.nativeElement.classList.add('overlay');\n    this.componentRef.onDestroy(() => {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'overlay');\n    });\n  }\n  private handleFocus() {\n    if (this.ngGuideStepFocusElement) {\n      this.elementRef.nativeElement.focus();\n    }\n  }\n\n\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n// import { CommonModule } from '@angular/common';\nimport { NgGuideWalkLibComponent } from './ng-guide-walk-lib.component';\nimport { NgGuideStepDirective } from './ng-guide-step.directive';\nimport { GuideContentComponent } from './guide-content/guide-content.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgGuideWalkLibService } from './ng-guide-walk-lib.service';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    // BrowserModule,\n  ],\n  entryComponents: [GuideContentComponent],\n  declarations: [NgGuideWalkLibComponent,\n    NgGuideStepDirective,\n    GuideContentComponent],\n  exports: [\n    NgGuideWalkLibComponent,\n    NgGuideStepDirective,\n    GuideContentComponent]\n})\nexport class NgGuideWalkLibModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n\n      ngModule: NgGuideWalkLibModule,\n\n      providers: [\n\n        {\n          provide: NgGuideWalkLibService,\n          useClass: NgGuideWalkLibService\n        }\n\n      ]\n    };\n  }\n}\n"]}