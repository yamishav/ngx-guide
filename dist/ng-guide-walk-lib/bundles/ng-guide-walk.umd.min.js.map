{"version":3,"sources":["ng://ng-guide-walk/lib/ng-guide-walk-lib.service.ts","ng://ng-guide-walk/lib/ng-guide-walk-lib.component.ts","ng://ng-guide-walk/lib/utils/index.ts","ng://ng-guide-walk/lib/guide-content/guide-content.component.ts","ng://ng-guide-walk/lib/ng-guide-step.directive.ts","ng://ng-guide-walk/lib/ng-guide-walk-lib.module.ts"],"names":["NgGuideWalkLibService","this","activeSteps","eventWalkSubject","Subject","currentStep","_config","Object","defineProperty","prototype","config","register","unregister","isLast","step","stopGuide","closeCurrentStep","undefined","startGuide","invokeStep","stepNum","next","event","nextGuide","getStepObservable","asObservable","pipe","filter","item","Injectable","args","providedIn","NgGuideWalkLibComponent","ngOnInit","Component","selector","template","toNumber","num","Number","isInteger","parseInt","GuideContentComponent","_element","_renderer","host","guideService","currentAction","_step","show","overlayObject","shouldCreateOverlay","positionFixed","eventsEnabled","location","displayArrow","customCss","GuideUtils.toNumber","_a","modifiers","popper","Popper","getNode","nativeElement","querySelector","placement","ngOnDestroy","destroy","clean","done","target","document","style","display","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","NgGuideStepDirective","elementRef","viewContainerRef","renderer","injector","resolver","walkLibService","position","ngGuideStepLocation","ngGuideStepStyle","ngGuideStepDisplayArrow","ngGuideStepFocusElement","stepNumber","subscribeToGuideRequest","closeComponent","componentRef","createComponent","factory","resolveComponentFactory","content","generateNgContent","setInputs","handleFocus","handleOverlay","ngGuideStepContent","createText","TemplateRef","createEmbeddedView","rootNodes","create","instanceRef","instance","_this","takeUntil","unsignedOnDestroyed","component","oldNgOnDestroy","onDestroySubject$","ReplaySubject","apply","complete","subscribe","walkEvent","addClass","onDestroy","removeClass","focus","Directive","ViewContainerRef","Injector","ComponentFactoryResolver","NgGuideWalkLibModule","forRoot","ngModule","providers","provide","useClass","NgModule","imports","CommonModule","BrowserModule","entryComponents","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { WalkEvent } from './ng-guide.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgGuideWalkLibService {\n  private activeSteps = 0;\n  private eventWalkSubject: Subject<WalkEvent> = new Subject();\n  private currentStep: number | null = null;\n  private _config = {};\n\n  get config() {\n    return this._config;\n  }\n  set config(config) {\n    this._config = config;\n  }\n\n  constructor() { }\n  register() {\n    this.activeSteps++;\n  }\n  unregister() {\n    this.activeSteps--;\n  }\n  isLast(step) {\n    return (this.activeSteps) === step;\n  }\n  stopGuide() {\n    this.closeCurrentStep();\n    this.currentStep = undefined;\n  }\n  public startGuide() {\n  \n    this.currentStep = 1;\n    this.invokeStep(this.currentStep);\n  }\n  public invokeStep(stepNum: number) {\n    this.closeCurrentStep();\n    this.currentStep = stepNum;\n    this.eventWalkSubject.next({ step: stepNum, event: 'open' });\n  }\n  private closeCurrentStep() {\n    if (this.currentStep) {\n      this.eventWalkSubject.next({ step: this.currentStep, event: 'close' });\n    }\n  }\n\n  public nextGuide() {\n    this.closeCurrentStep();\n    this.currentStep++;\n    this.invokeStep(this.currentStep);\n  }\n  public getStepObservable(stepNum: number): Observable<WalkEvent> {\n    return this.eventWalkSubject.asObservable().pipe(filter(item => item.step === stepNum));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ng-guide-walk',\n  template: `\n    <p>\n      ng-guide-walk-lib works!\n    </p>\n    <ng-content></ng-content>\n  `,\n  styles: []\n})\nexport class NgGuideWalkLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * \n * @param num - the number to parse\n * Try's to parse any to number\n */\nexport function toNumber(num: number | any): number {\n    return Number.isInteger(num) ? num : Number.parseInt(num);\n}\n\nexport function unsignedOnDestroyed(component: OnDestroy) {\n  const oldNgOnDestroy = component.ngOnDestroy;\n  const onDestroySubject$ = new ReplaySubject<void>(1);\n  component.ngOnDestroy = () => {\n    oldNgOnDestroy.apply(component);\n    onDestroySubject$.next(undefined);\n    onDestroySubject$.complete();\n  };\n  return onDestroySubject$;\n}\n","import { Component, OnInit, Input, OnDestroy, ElementRef, Renderer2, ViewEncapsulation } from '@angular/core';\nimport * as GuideUtils from '../utils';\nimport { NgGuideWalkLibService } from '../ng-guide-walk-lib.service';\nimport { TouchSequence } from 'selenium-webdriver';\nimport 'popper.js';\nimport Popper from 'popper.js';\nexport type WalkLocation = Popper.Placement;\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ng-guide-content',\n  templateUrl: './guide-content.component.html',\n  styleUrls: ['./guide-content.component.scss']\n})\nexport class GuideContentComponent implements OnInit, OnDestroy {\n  private currentAction: 'next' | 'stop' = 'next';\n  private _step = 1;\n  private popper: Popper;\n  show = true;\n  overlayObject = null;\n  @Input() shouldCreateOverlay = false;\n  @Input() modifiers: Popper.Modifiers;\n  @Input() positionFixed = false;\n  @Input() eventsEnabled = true;\n  @Input() target: string | Element;\n  @Input() location: WalkLocation = 'right';\n  @Input() displayArrow: boolean = true;\n  @Input() customCss: { [key: string]: string } = null;\n  @Input() set step(step: number) {\n    this._step = GuideUtils.toNumber(step);\n  }\n  get step() {\n    return this._step;\n  }\n\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _renderer: Renderer2,\n    private host: ElementRef<HTMLElement>,\n    private guideService: NgGuideWalkLibService) {\n\n  }\n\n  ngOnInit() {\n    // todo : move to an action trigger when needed\n\n    const { location, positionFixed, eventsEnabled, modifiers } = this;\n  \n    this.popper = new Popper(\n      this.getNode(),\n      this._element.nativeElement.querySelector('.ngx-guide'),\n      <any>{\n        placement: location,\n        positionFixed,\n        eventsEnabled,\n        modifiers\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.popper.destroy();\n    this.clean();\n  }\n  next() {\n    this.guideService.nextGuide();\n\n\n  }\n  isLast() {\n    return this.guideService.isLast(this.step);\n  }\n  done() {\n    this.guideService.stopGuide();\n  }\n  private getNode(): Element {\n    if (this.target) {\n      if (typeof this.target === 'string') {\n        return document.querySelector(this.target);\n      } else {\n        return this.target;\n      }\n    } else {\n      return this._element.nativeElement;\n    }\n  }\n  private clean() {\n    if (!this.overlayObject) { return; }\n    this.overlayObject.style.display = 'none';\n  }\n}\n","import {\n  Directive,\n  ViewContainerRef,\n  ElementRef,\n  Input,\n  TemplateRef,\n  Type,\n  ComponentRef,\n  ComponentFactoryResolver, Renderer2, Injector, OnDestroy, OnInit\n} from '@angular/core';\nimport { NgGuideWalkLibService } from './ng-guide-walk-lib.service';\nimport { toNumber, unsignedOnDestroyed } from './utils';\nimport { WalkEvent } from './ng-guide.types';\nimport { takeUntil } from 'rxjs/operators';\nimport { GuideContentComponent, WalkLocation } from './guide-content/guide-content.component';\n\n\n\n@Directive({\n  selector: '[ngGuideStep]',\n})\nexport class NgGuideStepDirective implements OnInit, OnDestroy {\n\n  position = 'below';\n\n  private _step: number = 1;\n\n  @Input('ngGuideStep') set step(stepNumber: number | string) {\n    this._step = toNumber(stepNumber);\n  }\n  get step() {\n    return this._step;\n  }\n  @Input('ngGuideStepContent') ngGuideStepContent: string | TemplateRef<any> | Type<any>;\n\n  @Input('ngGuideStepLocation') ngGuideStepLocation: WalkLocation = 'bottom';\n  @Input('ngGuideStepStyle') ngGuideStepStyle: { [key: string]: string } | null = null;\n  @Input('ngGuideStepDisplayArrow') ngGuideStepDisplayArrow: boolean = true;\n  @Input('ngGuideStepFocusElement') ngGuideStepFocusElement: boolean = true;\n  private componentRef: ComponentRef<GuideContentComponent>;\n  constructor(\n    private elementRef: ElementRef,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2,\n    private injector: Injector,\n    private resolver: ComponentFactoryResolver,\n    private walkLibService: NgGuideWalkLibService) { }\n\n  ngOnInit(): void {\n    this.subscribeToGuideRequest();\n    this.walkLibService.register();\n  }\n  ngOnDestroy(): void {\n    this.closeComponent();\n    this.walkLibService.unregister();\n  }\n  private closeComponent() {\n    if (!this.componentRef) { return; }\n    this.componentRef.destroy();\n    this.componentRef = null;\n  }\n  private createComponent() {\n    const factory = this.resolver.resolveComponentFactory(GuideContentComponent);\n    const content = this.generateNgContent();\n    this.componentRef = this.viewContainerRef.createComponent(factory, 0, null, content);\n    this.setInputs();\n    this.handleFocus();\n    this.handleOverlay();\n  }\n\n  generateNgContent() {\n    // Content is string\n    if (typeof this.ngGuideStepContent === 'string') {\n      const element = this.renderer.createText(this.ngGuideStepContent);\n      return [[element]];\n    }\n    // Content is Template\n    if (this.ngGuideStepContent instanceof TemplateRef) {\n      const viewRefTemplate = this.ngGuideStepContent.createEmbeddedView({});\n      return [viewRefTemplate.rootNodes];\n    }\n\n    // Else it's a component\n    const factory = this.resolver.resolveComponentFactory(this.ngGuideStepContent);\n    const viewRef = factory.create(this.injector);\n    return [[viewRef.location.nativeElement]];\n  }\n  private setInputs() {\n    const instanceRef = this.componentRef.instance;\n    instanceRef.step = this.step as number;\n    instanceRef.target = this.elementRef.nativeElement;\n    instanceRef.location = this.ngGuideStepLocation || 'bottom';\n    instanceRef.displayArrow = this.ngGuideStepDisplayArrow;\n    if (this.ngGuideStepStyle) {\n      instanceRef.customCss = this.ngGuideStepStyle;\n    }\n  }\n  private subscribeToGuideRequest() {\n    this.walkLibService.getStepObservable(<number>this.step)\n      .pipe(takeUntil(unsignedOnDestroyed(this)))\n      .subscribe((walkEvent: WalkEvent) => walkEvent.event === 'open' ? this.createComponent() : this.closeComponent());\n  }\n\n  private handleOverlay() {\n    this.renderer.addClass(this.elementRef.nativeElement, 'overlay');\n    // this.elementRef.nativeElement.classList.add('overlay');\n    this.componentRef.onDestroy(() => {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'overlay');\n    });\n  }\n  private handleFocus() {\n    if (this.ngGuideStepFocusElement) {\n      this.elementRef.nativeElement.focus();\n    }\n  }\n\n\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgGuideWalkLibComponent } from './ng-guide-walk-lib.component';\nimport { NgGuideStepDirective } from './ng-guide-step.directive';\nimport { GuideContentComponent } from './guide-content/guide-content.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgGuideWalkLibService } from './ng-guide-walk-lib.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserModule,\n  ],\n  entryComponents: [GuideContentComponent],\n  declarations: [NgGuideWalkLibComponent,\n    NgGuideStepDirective,\n    GuideContentComponent],\n  exports: [\n    NgGuideWalkLibComponent,\n    NgGuideStepDirective,\n    GuideContentComponent]\n})\nexport class NgGuideWalkLibModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n\n      ngModule: NgGuideWalkLibModule,\n\n      providers: [\n\n        {\n          provide: NgGuideWalkLibService,\n          useClass: NgGuideWalkLibService\n        }\n\n      ]\n    };\n  }\n}\n"]}